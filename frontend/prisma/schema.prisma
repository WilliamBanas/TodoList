// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id
  nickname     String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  taskCategory TaskCategory[]
  session      Session[]
  table        Table[]
}

model Session {
  id        String   @id
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId    String
  expiresAt DateTime
}

model Table {
  id           String         @id
  title        String
  favorite     Boolean?       @default(false)
  userId       String
  user         User           @relation(references: [id], fields: [userId])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tag          Tag[]
  taskCategory TaskCategory[]
}

model Tag {
  id       String     @id
  name     String     @unique
  color    String
  table    Table      @relation(references: [id], fields: [tableId])
  tableId  String
  tag_Task Tag_Task[]
}

model TaskCategory {
  id        String   @id
  name      String
  table     Table    @relation(references: [id], fields: [tableId])
  tableId   String
  user      User     @relation(references: [id], fields: [userId])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task[]
}

model Task {
  id          String       @id
  title       String
  description String?
  endAt       String?
  links       String[]
  category    TaskCategory @relation(references: [id], fields: [categoryId])
  categoryId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tag_Task    Tag_Task[]
}

model Tag_Task {
  id     String @id
  tag    Tag    @relation(references: [id], fields: [tagId])
  tagId  String
  task   Task   @relation(references: [id], fields: [taskId])
  taskId String
}

model Image {
  id   String @id
  name String
  size Int
  type String
  bin  Bytes
}
